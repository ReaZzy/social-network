{"version":3,"sources":["hoc/withAuthRedirect.js","components/profile/posts/Posts.module.css","components/profile/Profile.module.css","components/profile/ProfileInfo/ProfileInfo.module.css","components/profile/ProfileInfo/ProfileDataForm.module.css","components/profile/ProfileInfo/ProfileStatus.tsx","components/profile/ProfileInfo/ProfileDataForm.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/posts/post/Post.tsx","components/profile/posts/PostForm.tsx","components/profile/posts/Posts.tsx","components/profile/posts/PostsContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx"],"names":["withAuthRedirect","Component","AuthRedirect","this","props","isAuth","to","React","connect","mapStateToProps","state","auth","module","exports","ProfileStatus","statusProps","updateStatus","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","onChange","e","target","value","minLength1","minLengthValidator","maxLength60","maxLengthValidator","maxLength150","ProfileDataForm","reduxForm","form","handleSubmit","error","onSubmit","className","s","Field","placeholder","component","InputProfileData","name","validate","type","TextareaProfile","save","ProfileInfo","profileInfo","savePhoto","saveProfile","isOwner","photoLoading","userId","Preloader","pic","src","photos","large","DefaultUserImg","width","alt","upload","unselectable","summary","button","onClick","files","length","inputPhoto","formData","then","initialValues","text","fullName","contacts","instagram","lookingForAJob","lookingForAJobDescription","aboutMe","Post","author_image","author","date","like_count","maxLength300","PostFormRedux","textarea","rows","cols","required","cominput","Posts","memo","data","addPost","postsElemets","reverse","map","post","id","key","content","postMessage","PostsContainer","profilePage","postData","Profile","ProfileContainer","reGetProfile","match","params","getProfile","getStatus","prevProps","prevState","snapshot","compose","profileInfoLoading","withRouter"],"mappings":"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","file":"static/js/3.c4985fbc.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nexport const withAuthRedirect = (Component) =>{\r\n    class AuthRedirect extends React.Component{\r\n        render() {\r\n            if (!this.props.isAuth){return <Redirect to=\"/login\"/>}\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    let AuthConnectedRedirect = connect(mapStateToProps)(AuthRedirect)\r\n    return AuthConnectedRedirect\r\n}\r\n\r\nconst mapStateToProps = (state) =>({\r\n    isAuth: state.auth.isAuth\r\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"Posts_textarea__GKj3r\",\"cominput\":\"Posts_cominput__BMiSf\",\"text\":\"Posts_text__1PTc8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__lT-26\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__1DCnB\",\"pic\":\"ProfileInfo_pic__2j4Tv\",\"text\":\"ProfileInfo_text__22XSw\",\"inputPhoto\":\"ProfileInfo_inputPhoto__119TB\",\"summary\":\"ProfileInfo_summary__2LNG1\",\"unselectable\":\"ProfileInfo_unselectable__NnFUj\",\"upload\":\"ProfileInfo_upload__117_9\",\"button\":\"ProfileInfo_button__26ISU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ProfileDataForm_form__1pdeO\",\"save\":\"ProfileDataForm_save__1A9DV\"};","import React, {useState, useEffect} from \"react\";\r\n\r\n\r\ntype PropsType = {\r\n    statusProps: string\r\n    updateStatus: ( status:string) =>void\r\n}\r\n\r\nconst ProfileStatus:React.FC<PropsType> = ({statusProps, updateStatus}) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState<string>(statusProps)\r\n\r\n    useEffect( () =>{\r\n        setStatus(statusProps)\r\n    }, [statusProps] )\r\n\r\n    let setEditModeValue = () => {setEditMode(true)}\r\n\r\n    let unSetEditMode = () =>{\r\n        setEditMode(false)\r\n        updateStatus(status)\r\n    }\r\n\r\n    let onChange = (e: React.ChangeEvent<HTMLInputElement>) =>{setStatus(e.target.value)}\r\n\r\n        return (\r\n            <>\r\n                {!editMode &&\r\n                    <span onDoubleClick={setEditModeValue}><b>Status</b>: {statusProps !== null? statusProps: \"â€Ž\"}</span>\r\n                }\r\n                {editMode &&\r\n                     <span><b>Status</b>:<input autoFocus={true} onBlur={unSetEditMode} onChange={onChange}\r\n                         value={status}/></span>\r\n                }\r\n            </>\r\n        )\r\n\r\n}\r\n\r\nexport default ProfileStatus","import React from 'react'\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {InputProfileData, TextareaProfile} from \"../../common/Textarea\";\r\nimport {maxLengthValidator, minLengthValidator} from \"../../../addons/validators/validators\";\r\nimport s from \"./ProfileDataForm.module.css\"\r\n\r\nlet minLength1 = minLengthValidator(1)\r\nlet maxLength60 = maxLengthValidator(60)\r\nlet maxLength150 = maxLengthValidator(150)\r\n\r\ntype PropsType = {\r\n    handleSubmit: any\r\n    error:any\r\n}\r\n\r\nconst ProfileDataForm1:React.FC<PropsType> = ({handleSubmit, error}) =>{\r\n    return(\r\n        <form onSubmit={handleSubmit} className={s.form}>\r\n            <label>Full name</label>\r\n            <Field placeholder={\"Full name\"} component={InputProfileData} name={\"fullName\"}validate={[minLength1, maxLength60]}/>\r\n            <label>Instagram</label>\r\n            <Field placeholder={\"Instagram\"} component={InputProfileData} name={\"contacts.instagram\"}/>\r\n            <label>lookingForAJob </label>\r\n            <Field placeholder={\"lookingForAJob\"} type={\"checkbox\"} component={\"input\"} name={\"lookingForAJob\"}/>\r\n            <br/><br/>\r\n            <label>Description</label>\r\n            <Field placeholder={\"Description\"} component={TextareaProfile} name={\"lookingForAJobDescription\"} validate={[minLength1, maxLength150]}/>\r\n\r\n            <label>About me </label>\r\n            <Field placeholder={\"About me\"} component={InputProfileData} name={\"aboutMe\"} validate={[minLength1, maxLength150]}/>\r\n            <button className={s.save}>Save</button>\r\n            {error &&<div>{error}</div>}\r\n        </form>\r\n    )\r\n}\r\nlet ProfileDataForm = reduxForm({form:\"profileData\"})(ProfileDataForm1)\r\n\r\nexport default ProfileDataForm","import React, {useState} from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport DefaultUserImg from \"./../../../media/images/user.png\"\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nexport type ProfileInfoType = {\r\n    lookingForAJobDescription: string\r\n    userId:number\r\n    aboutMe:string\r\n    lookingForAJob:boolean\r\n    fullName:string\r\n    contacts: {\r\n        instagram: string\r\n    }\r\n    photos:{\r\n        large:string\r\n        small:string\r\n    }\r\n}\r\n\r\ntype PropsType = {\r\n    profileInfo: ProfileInfoType\r\n    photoLoading: boolean\r\n    userId:number\r\n    updateStatus: (status:string) =>void\r\n    isAuth:boolean\r\n    isOwner:boolean\r\n    saveProfile: (formData:any, userId:number) => Promise<void>\r\n    savePhoto: (file:File) => void\r\n    status: string\r\n}\r\n\r\nconst ProfileInfo:React.FC<PropsType> = ({profileInfo,status, savePhoto, saveProfile, isOwner, isAuth, updateStatus, userId, photoLoading}) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profileInfo){\r\n        return <Preloader/>\r\n    }\r\n    const onSetPhoto = (e: any) =>{\r\n        if(e.target.files.length){\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData:any) =>{\r\n        saveProfile(formData, profileInfo.userId).then(\r\n            () =>{\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n    if(photoLoading){\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <img\r\n                className={s.pic}\r\n                src={profileInfo.photos.large !==null ? profileInfo.photos.large:DefaultUserImg}\r\n                width=\"160px\"\r\n                alt=\"\"\r\n            />\r\n\r\n            {isOwner && <>\r\n            <details className={s.upload}>\r\n                <summary className={s.unselectable + \" \" + s.summary}>Edit</summary>\r\n\r\n                <button className={s.button} onClick={()=>{setEditMode(!editMode)}}>{!editMode\r\n                    ? <span>Edit profile</span>\r\n                    : <span>Cancel</span>}\r\n                </button>\r\n\r\n                {editMode &&<input type={\"file\"} onChange={onSetPhoto} className={s.inputPhoto}/>}\r\n            </details>\r\n            </>\r\n            }\r\n\r\n            {editMode\r\n                ?<ProfileDataForm onSubmit = {onSubmit} initialValues={profileInfo}/>\r\n                :<div className={s.text}>\r\n                    <h2>{profileInfo.fullName !==null ? profileInfo.fullName : \"â€Ž\"}</h2>\r\n                    <ProfileStatus statusProps = {status} updateStatus = {updateStatus} />\r\n                    <br/>\r\n                    <b>Instagram</b> : {profileInfo.contacts.instagram !==null ? profileInfo.contacts.instagram: \"â€Ž\"}\r\n                    <br/>\r\n                    <b>Looking for a job</b> : {profileInfo.lookingForAJob ? <span>&#9745;</span> : <span>&#9746;</span>}\r\n                    <br/>\r\n                    <b>Description</b> : {profileInfo.lookingForAJobDescription !==null ? <span>{profileInfo.lookingForAJobDescription}</span> : \" \"}\r\n                    <br/>\r\n                    <b>About me</b>: {profileInfo.aboutMe !== null? profileInfo.aboutMe: \"â€Ž\"}\r\n                    <br/>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type PostType = {\r\n  author_image: string\r\n  id: number| null\r\n  author:string\r\n  date: string\r\n  text:string\r\n  like_count:number\r\n}\r\n\r\nconst Post:React.FC<PostType> = ({author_image, author, date, text, like_count}) => {\r\n  return (\r\n    <div className=\"comment\">\r\n      <NavLink className=\"avatar\" to=\"/#\">\r\n        <img src={author_image} alt=\"\" />\r\n      </NavLink>\r\n      <div className=\"content\">\r\n        <NavLink className=\"author\" to=\"/#\">\r\n          {author}\r\n        </NavLink>\r\n        <div className=\"metadata\">\r\n          <span className=\"date\">{date}</span>\r\n        </div>\r\n        <div className=\"text\">{text}</div>\r\n        <div className=\"actions\">\r\n          <NavLink className=\"reply\" to=\"/#\">\r\n            Reply\r\n          </NavLink>\r\n          <NavLink className=\"reply\" to=\"/#\">\r\n            {like_count} Likes\r\n          </NavLink>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport s from \"./Posts.module.css\";\r\nimport {maxLengthValidator, minLengthValidator, required} from \"../../../addons/validators/validators\";\r\nimport {TextareaProfile} from \"../../common/Textarea\";\r\n\r\nlet minLength1 = minLengthValidator(1)\r\nlet maxLength300 = maxLengthValidator(300)\r\n\r\ntype PropsType = {\r\n    handleSubmit:any\r\n}\r\n\r\nconst PostForm:React.FC<PropsType> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field component={TextareaProfile} name={\"postMessage\"} className={s.textarea} rows=\"3\" cols=\"110\" validate = {[required, minLength1, maxLength300]}/>\r\n            <p className={s.cominput}>\r\n                <button className=\"ui tiny primary button unselectable\" >Save</button>\r\n            </p>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nlet PostFormRedux = reduxForm({form: \"postForm\"})(PostForm)\r\nexport default PostFormRedux","import React from \"react\";\r\nimport s from \"./Posts.module.css\";\r\nimport Post, {PostType} from \"./post/Post\";\r\nimport PostFormRedux from \"./PostForm\";\r\n\r\n\r\ntype PropsType = {\r\n    data: Array<PostType>\r\n    addPost: (postMessage:string) => void\r\n}\r\n\r\nconst Posts:React.FC<PropsType> = React.memo(({data, addPost}) => {\r\n\r\n    let postsElemets = [...data].reverse().map(post => {\r\n        return (\r\n            <Post\r\n                id = {post.id}\r\n                key = {post.id}\r\n                author_image={post.author_image}\r\n                author={post.author}\r\n                text={post.text}\r\n                date={post.date}\r\n                like_count={post.like_count}\r\n            />\r\n        )\r\n    })\r\n    let onSubmit = (formData:any) => {\r\n        addPost(formData.postMessage)\r\n        formData.postMessage = \"\"\r\n    }\r\n    return (\r\n        <div className={s.content}>\r\n            <h3 className={s.text}>Leave your comment here</h3>\r\n            <PostFormRedux onSubmit={onSubmit}/>\r\n            <div className=\"ui comments\">\r\n                {postsElemets}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Posts;\r\n","import {addPost} from \"../../../redux/profileReducer\";\r\nimport Posts from \"./Posts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state:any) =>{\r\n    return {\r\n        data: state.profilePage.postData,\r\n    }\r\n}\r\n\r\nconst PostsContainer = connect(mapStateToProps, {\r\n    addPost,\r\n    },)(Posts)\r\n\r\nexport default PostsContainer;\r\n","import React from \"react\";\r\nimport s from \"./Profile.module.css\";\r\nimport ProfileInfo, { ProfileInfoType } from \"./ProfileInfo/ProfileInfo\";\r\nimport PostsContainer from \"./posts/PostsContainer\";\r\n\r\n\r\ntype PropsType = {\r\n    profileInfo: ProfileInfoType\r\n    photoLoading: boolean\r\n    updateStatus: (status:string) =>void\r\n    isAuth:boolean\r\n    isOwner:boolean\r\n    saveProfile: (formData:any, userId:number) => Promise<void>\r\n    savePhoto: (file:File) => void\r\n    status: string\r\n    userId:number\r\n}\r\n\r\n\r\nconst Profile:React.FC<PropsType> = ({savePhoto, photoLoading, saveProfile, isOwner, profileInfo, status, updateStatus, isAuth, userId}) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo  savePhoto = {savePhoto} photoLoading =  {photoLoading} saveProfile = {saveProfile}\r\n                          isOwner = {isOwner} profileInfo = {profileInfo} userId = { userId}\r\n                          status ={status} updateStatus = {updateStatus} isAuth = {isAuth}/>\r\n            <PostsContainer/>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfile, getStatus, savePhoto, saveProfile, updateStatus} from \"../../redux/profileReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileInfoType} from \"./ProfileInfo/ProfileInfo\";\r\ntype MapStateToPropsType = {\r\n    match: any\r\n    isAuth: boolean\r\n    getProfile: (userId:number) => void\r\n    userId:number\r\n    getStatus: (userId:number) => void\r\n    profileInfo: ProfileInfoType\r\n    status: string\r\n    saveProfile: (formData:any, userId:number) => Promise<void>\r\n    photoLoading: boolean\r\n    updateStatus: (status:string) =>void\r\n    savePhoto: (file:File) => void\r\n}\r\n\r\n\r\nclass ProfileContainer  extends React.Component<MapStateToPropsType>{\r\n\r\n    reGetProfile = () =>{\r\n        let userId= this.props.match.params.userId\r\n        if (this.props.isAuth && !userId) {\r\n            userId = this.props.userId\r\n        }\r\n\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.reGetProfile()\r\n    }\r\n    componentDidUpdate(prevProps:any, prevState:any, snapshot:any) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.reGetProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {/*eslint-disable-next-line*/}\r\n                <Profile {...this.props} isOwner = {!this.props.match.params.userId || this.props.userId == this.props.match.params.userId} savePhoto = {this.props.savePhoto}\r\n                         profileInfo={this.props.profileInfo} status = {this.props.status} updateStatus = {this.props.updateStatus}\r\n                         photoLoading = {this.props.photoLoading} saveProfile = {this.props.saveProfile}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:any) => ({\r\n    profileInfo: state.profilePage.profileInfo,\r\n    status: state.profilePage.status,\r\n    isAuth:state.auth.isAuth,\r\n    userId: state.auth.id,\r\n    photoLoading: state.profilePage.photoLoading,\r\n    profileInfoLoading: state.profilePage.profileInfoLoading,\r\n})\r\nexport default compose(\r\n    connect(mapStateToProps, {getProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}