{"version":3,"sources":["hoc/withAuthRedirect.js","components/Dialogs/Dialogs.module.css","components/Dialogs/Dialogs/Dialog.module.css","components/Dialogs/Messages/Message.module.css","components/Dialogs/Dialogs/Dialog.jsx","components/Dialogs/Messages/Message.jsx","components/Dialogs/sendMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["withAuthRedirect","Component","AuthRedirect","this","props","isAuth","to","React","connect","mapStateToProps","state","auth","module","exports","Dialog","id","className","s","dialog","activeClassName","active","onClick","getMessagesList","src","photos","defaultUserImg","alt","f_img","userName","Message","yes","messages","img","mes","message","minLength1","minLengthValidator","maxLength300","maxLengthValidator","SendMessageForm","reduxForm","form","onSubmit","handleSubmit","Field","rows","cols","someArbitraryOtherProp","name","component","TextareaDialogs","placeholder","validate","required","butt","button","Dialogs","userId","match","params","dialogsElements","dialogs","map","small","messagesElements","body","key","content","title","span","dialogsLoading","Preloader","messag","messagesLoading","but","formData","sendMessage","DialogsContainer","reGetDialogs","length","getDialogsPage","prevProps","prevState","snapshot","values","PureComponent","compose","dialogsPage","messageData","dialogsData","withRouter"],"mappings":"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","file":"static/js/3.f9cda706.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nexport const withAuthRedirect = (Component) =>{\r\n    class AuthRedirect extends React.Component{\r\n        render() {\r\n            if (!this.props.isAuth){return <Redirect to=\"/login\"/>}\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    let AuthConnectedRedirect = connect(mapStateToProps)(AuthRedirect)\r\n    return AuthConnectedRedirect\r\n}\r\n\r\nconst mapStateToProps = (state) =>({\r\n    isAuth: state.auth.isAuth\r\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Dialogs_content__1FUzv\",\"span\":\"Dialogs_span__3kP_e\",\"title\":\"Dialogs_title__1nMPx\",\"but\":\"Dialogs_but__2zZAW\",\"button\":\"Dialogs_button__18bSs\",\"messag\":\"Dialogs_messag__3ckUi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__30jsa\",\"active\":\"Dialog_active__3Vfu9\",\"f_img\":\"Dialog_f_img__1b7H3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Message_messages__o67uO\",\"yes\":\"Message_yes__aW4Sg\"};","import React from \"react\";\r\nimport s from \"./Dialog.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport defaultUserImg from \"./../../../media/images/user.png\"\r\n\r\n\r\nconst Dialog = (props) => {\r\n    let getMessagesList =()=>{\r\n            props.getMessagesList(props.id)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <NavLink to={\"/messages/\" + props.id} className={s.dialog} activeClassName={s.active} onClick = {getMessagesList}>\r\n\r\n                <img src = {props.photos || defaultUserImg} alt = '' className={s.f_img}/>\r\n                {props.userName}\r\n            </NavLink>\r\n            <br/>\r\n            <br/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialog;","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\nconst Message = (props) => {\r\n    return(\r\n        <div className={s.yes}>\r\n        <div className={s.messages}>\r\n\r\n            <img className={s.img} src ={props.img} alt='' />\r\n            <span className={s.mes }>{props.message}</span>\r\n\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthValidator, minLengthValidator, required} from \"../../addons/validators/validators\";\r\nimport {TextareaDialogs} from \"../common/Textarea\";\r\n\r\nlet minLength1 = minLengthValidator(1)\r\nlet maxLength300 = maxLengthValidator(300)\r\n\r\nconst SendMessageFo = (props) =>{\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field rows=\"3\" cols = \"50\" someArbitraryOtherProp={\"s.textarea1\"}\r\n                   name =\"message\" component={TextareaDialogs}\r\n                   placeholder={\"Type your message...\"} validate = {[required, minLength1, maxLength300]}/>\r\n            <span className={s.butt}><button className={s.button}>Send</button></span>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst SendMessageForm = reduxForm({form: \"sendMessage\"})(SendMessageFo)\r\nexport default SendMessageForm","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport Dialog from \"./Dialogs/Dialog\";\r\nimport Message from \"./Messages/Message\";\r\nimport SendMessageForm from \"./sendMessageForm\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\nconst Dialogs = (props) => {\r\n    let userId = props.match.params.userId\r\n\r\n    let dialogsElements = props.dialogs.map(dialog => <Dialog id = {dialog.id} userName ={dialog.userName} photos = {dialog.photos.small}\r\n                                                              getMessagesList ={props.getMessagesList} messages = {props.messages}/>)\r\n    let messagesElements = props.messages.map(message => <Message message = {message.body} key = {message.id}/>)\r\n\r\n    const onSubmit = (formData) =>{\r\n        props.sendMessage(userId, formData.message)\r\n        props.getMessagesList(userId)\r\n        props.getMessagesList(userId)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.content }>\r\n            <div className={s.dialogs + \"unselectable\"}>\r\n                <div className={s.title }>Dialogs</div>\r\n                <div className={s.span}>{ props.dialogsLoading ? <Preloader/> : dialogsElements }</div>\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div className={s.messag}>\r\n                { props.messagesLoading? <Preloader/> : messagesElements }</div>\r\n                <div className={s.but}>\r\n\r\n                    <SendMessageForm onSubmit ={onSubmit}/>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import {getDialogsPage, getMessagesList, sendMessage} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport React, {PureComponent} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\nclass DialogsContainer extends PureComponent{\r\n    reGetDialogs = () =>{\r\n        let userId = this.props.match.params.userId\r\n        if (userId){\r\n            this.props.getMessagesList(userId)\r\n        }\r\n        if (this.props.dialogs.length < 1) {\r\n            this.props.getDialogsPage()\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.reGetDialogs()\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(this.props.messages.values !== prevProps.messages.values ) {\r\n            this.reGetDialogs()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Dialogs {...this.props} messages = {this.props.messages} dialogs = {this.props.dialogs} dialogsLoading ={this.props.dialogsLoading}\r\n                        getMessagesList = {this.props.getMessagesList} userId = {this.props.userId} messagesLoading={this.props.messagesLoading}\r\n        />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.dialogsPage.messageData,\r\n        dialogs: state.dialogsPage.dialogsData,\r\n        dialogsLoading: state.dialogsPage.dialogsLoading,\r\n        messagesLoading: state.dialogsPage.messagesLoading,\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,{sendMessage, getDialogsPage, getMessagesList}),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(DialogsContainer)"],"sourceRoot":""}