{"version":3,"sources":["components/Todo/todo.module.css","components/Todo/Todoform.js","components/Todo/Todo.jsx"],"names":["module","exports","minLength1","minLengthValidator","maxLength300","maxLengthValidator","TodoForm","reduxForm","form","props","onSubmit","handleSubmit","Field","component","TextareaTodo","name","validate","required","className","s","button","Todo","useState","todos","setTodos","useEffect","fetch","then","response","json","formData","concat","id","length","completed","title","todoItem","console","log","ul","map","item","index","done","type","checked","onChange","todo","butCancel","onClick","filter"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,SAAW,uBAAuB,OAAS,qBAAqB,KAAO,mBAAmB,GAAK,iBAAiB,UAAY,wBAAwB,GAAK,mB,wHCKvKC,EAAaC,YAAmB,GAChCC,EAAeC,YAAmB,KAavBC,EADCC,YAAU,CAACC,KAAM,QAAjBD,EAVC,SAACE,GACd,OACI,0BAAMC,SAAUD,EAAME,cAClB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAcC,KAAO,WAAWC,SAAY,CAACC,IAAUf,EAAYE,KACrF,6BACI,4BAAQc,UAAWC,IAAEC,QAArB,aC6CDC,UAtDF,SAACZ,GAAW,IAAD,EACIa,mBAAS,IADb,mBACfC,EADe,KACRC,EADQ,KAWpBC,qBAAU,WACNC,MAAM,uDACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAJ,GAAK,OAAIC,EAASD,QAC7B,IAWH,OACI,2BACI,uCACA,2BACI,gBAAC,EAAD,iBAAcd,EAAd,CAAqBC,SATlB,SAACoB,GACZN,EAASD,EAAMQ,OAAO,CAAC,CAACC,GAAIT,EAAMU,OAAS,EAAGC,WAAW,EAAOC,MAAQL,EAASM,aACjFN,EAASM,SAAW,GACpBC,QAAQC,IAAIf,OAOJ,sBAAIL,UAAWC,IAAEoB,IAEbhB,EAAMiB,KAAI,SAACC,EAAMC,GAAP,OAAiB,sBAAIxB,UAAWuB,EAAKP,UAAWf,IAAEwB,KAAO,IAC/D,uBAAKzB,UAAWC,IAAEiB,UACd,4BACA,yBAAOQ,KAAM,WAAYC,QAASJ,EAAKP,UAAWY,SAAU,WAjC/D,IAACd,IAiCkFS,EAAKT,GAhCzGR,EAASD,EAAMiB,KAAI,SAAAO,GAIf,OAHGA,EAAKf,KAAOA,IACXe,EAAKb,WAAaa,EAAKb,WAEpBa,SA2BS,OAGA,0BAAQ7B,UAAWC,IAAEa,IAAKU,EAAM,GAC/BD,EAAKN,OAEN,0BAAQjB,UAAWC,IAAE6B,UAAWC,QAAS,kBAxB7CjB,EAwB8DS,EAAKT,QAvBnFR,EAAUD,EAAM2B,QAAO,SAAAH,GAAI,OAAIA,EAAKf,KAAOA,MAD5B,IAACA,IAwBI","file":"static/js/6.cb0184c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoItem\":\"todo_todoItem__PK7sr\",\"button\":\"todo_button__2NENI\",\"done\":\"todo_done__XBZKs\",\"id\":\"todo_id__3uSHW\",\"butCancel\":\"todo_butCancel__3d3Mw\",\"ul\":\"todo_ul__14Lbk\"};","import {Field, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {TextareaTodo} from \"../common/Textarea\";\r\nimport {maxLengthValidator, minLengthValidator, required} from \"../../addons/validators/validators\";\r\nimport s from \"./todo.module.css\"\r\n\r\nlet minLength1 = minLengthValidator(1)\r\nlet maxLength300 = maxLengthValidator(300)\r\n\r\nconst Todoform = (props) =>{\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={TextareaTodo} name = \"todoItem\" validate = {[required, minLength1, maxLength300]} />\r\n            <div>\r\n                <button className={s.button}>Save</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst TodoForm =reduxForm({form: \"todo\"})(Todoform)\r\nexport default TodoForm\r\n\r\n\r\n","import * as React from \"react\";\r\nimport TodoForm from \"./Todoform\";\r\nimport s from \"./todo.module.css\"\r\nimport {useEffect, useState} from \"react\";\r\n\r\nconst Todo = (props) => {\r\n    let [todos, setTodos] = useState([])\r\n\r\n    const setCompleted = (id) =>{\r\n        setTodos(todos.map(todo=>{\r\n            if(todo.id === id){\r\n                todo.completed = !todo.completed\r\n            }\r\n            return todo\r\n        }))\r\n    }\r\n    useEffect(()=>{\r\n        fetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\r\n            .then(response => response.json())\r\n            .then(todos => setTodos(todos))\r\n    }, [])\r\n\r\n    const removeTodo = (id) =>{\r\n        setTodos( todos.filter(todo => todo.id !== id) )\r\n    }\r\n\r\n    let onSubmit = (formData) => {\r\n        setTodos(todos.concat([{id: todos.length + 1, completed: false, title : formData.todoItem, }]))\r\n        formData.todoItem = \"\"\r\n        console.log(todos)\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>TODO LIST</h1>\r\n            <div>\r\n                <TodoForm {...props} onSubmit = {onSubmit}/>\r\n                <ul className={s.ul}>\r\n                {\r\n                    todos.map((item, index) => <li className={item.completed? s.done : \"\"}>\r\n                        <div className={s.todoItem}>\r\n                            <span >\r\n                            <input type={\"checkbox\"} checked={item.completed} onChange={() => {setCompleted(item.id)}} />\r\n                            &nbsp;\r\n                            <strong className={s.id}>{index+1}</strong>\r\n                            {item.title}\r\n                            </span>\r\n                            <button className={s.butCancel} onClick={() => removeTodo(item.id)}>&times;</button>\r\n                        </div>\r\n                        </li>\r\n                    )\r\n                }\r\n                </ul>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Todo"],"sourceRoot":""}