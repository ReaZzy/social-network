{"version":3,"sources":["dal/api.ts","redux/usersReducer.ts","components/News/News.module.css","components/Music/Music.module.css","components/Settings/Settings.module.css","media/images/loading.svg","components/common/Preloader/preloader.module.css","components/common/textarea.module.css","components/Navbar/Navbar.module.css","serviceWorker.js","redux/navbarReducer.ts","redux/authReducer.ts","redux/redux-store.ts","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Navbar/FriendsNav/FriendsNav.tsx","components/Navbar/Navbar.tsx","components/Navbar/NavbarContainer.tsx","components/header/Header.tsx","components/header/headerContainer.tsx","components/Login/LoginForm.tsx","components/Login/Login.tsx","hoc/suspense.js","App.js","index.js","components/Login/Login.module.css","components/header/Header.module.css","media/images/user.png","components/common/Preloader/Preloader.jsx","addons/validators/validators.ts","components/common/Textarea.jsx","redux/profileReducer.ts","components/Navbar/FriendsNav/FriendsNav.module.css","redux/dialogsReducer.ts"],"names":["instance","axios","create","withCredentials","headers","baseURL","getUsers","count","currentPage","term","friend","get","then","response","data","followAPI","id","delete","unfollowAPI","post","getLogin","getLoginInfo","getProfileInfo","userId","getStatusAPI","updateStatusAPI","status","put","loginAPI","email","password","rememberMe","captcha","getCapthaAPI","exitAPI","getDialogsAPI","startDialogAPI","getMessagesAPI","page","sendMessageAPI","body","deleteMessageAPI","messageId","savePhotoAPI","image","formData","FormData","append","saveProfileAPI","profile","initialState","users","totalCount","isLoading","followLoading","currentTerm","setCurrentTerm","type","setCurrentPage","setUsers","setPageUsers","setTotalUsersCount","totalUsers","setLoading","setFollowLoading","isFollowLoading","setUsersPage","length","dispatch","a","items","setPageU","p","setFollow","resultCode","setUnfollow","usersReducer","state","action","map","u","followed","filter","module","exports","Boolean","window","location","hostname","match","friendsData","name","img","navbarReducer","login","isAuth","info","loading","needCaptcha","captchaUrl","setUserData","boolean","setAuth","getCaptha","url","authReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","dialogsReducer","navBar","auth","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","News","className","s","content","Music","Settings","useState","number","setNumber","onClick","FriendsNav","friends","to","src","defaultUserImg","alt","Navbar","friendsElements","key","nav","activeClassName","active","line","NavbarContainer","connect","Header","profileInfo","getProfile","exit","Preloader","header","height","photos","small","DefaultUserImg","avatar","Login","loginButton","HeaderContainer","this","props","setUser","React","Component","reload","LoginReduxForm","reduxForm","handleSubmit","error","onSubmit","Field","placeholder","component","InputLogin","disabled","input","validate","required","data-validate","fieldError","width","button","setLogin","reset","message","messages","stopSubmit","_error","withSuspense","Suspense","fallback","UsersContainer","lazy","ProfileContainer","DialogsContainer","Todo","App","exact","from","path","render","get_initialize","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","minLengthValidator","minLength","value","maxLengthValidator","maxLength","TextareaDialogs","meta","textareaDialogs","touched","alert","TextareaProfile","alertProfile","alertLogin","TextareaTodo","textareaTodo","alertTodo","InputProfileData","postData","author_image","author","text","date","like_count","profileInfoLoading","photoLoading","addPost1","postText","setStatus","savePhotoDone","file","setPhotoLoading","getStatus","updateStatus","addPost","saveProfile","Promise","reject","savePhoto","newPost","like_cout","dialogsData","messageData","dialogsLoading","messagesLoading","getDialogsPage","dialogs","startDialog","getMessagesList","messageList","sendMessage","deleteMessage","reverse"],"mappings":"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","file":"static/js/main.c50c9592.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {ProfileInfoType} from \"../components/profile/ProfileInfo/ProfileInfo\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"e4ab732c-d4b7-4090-ae44-56e101c6d884\",\r\n    },\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n})\r\n\r\ntype MeResponseType = {\r\n    data:{\r\n        login:string\r\n        email:string\r\n        id:number\r\n    }\r\n    resultCode:number\r\n    messages: Array<string>\r\n}\r\ntype LoginResponseType = {\r\n    data:{\r\n        userId:number\r\n    }\r\n    resultCode:number\r\n    messages: Array<string>\r\n}\r\n\r\n\r\nexport const getUsers = (count = 7, currentPage:number, term:string | null = \" \", friend:boolean | null = null) => {\r\n    return instance.get(`users?count=${count}&page=${currentPage}&term=${term}&?friend=${friend}`,).then(response => {\r\n        return response.data\r\n    })\r\n}\r\n\r\nexport const followAPI = (id:number) =>{\r\n    return instance.delete(`follow/${id}`).then(response => {return response.data})\r\n}\r\n\r\nexport const unfollowAPI = (id:number) =>{\r\n    return instance.post(`follow/${id}`).then(response => {return response.data})\r\n}\r\n\r\nexport const getLogin = () =>{\r\n    return instance.get<MeResponseType>(`auth/me`).then(response => {return response.data})\r\n}\r\n\r\nexport const getLoginInfo = (id:number) =>{\r\n    return instance.get(`profile/`+id)\r\n}\r\n\r\nexport const getProfileInfo = (userId:number) =>{\r\n    return instance.get(`profile/`+userId)\r\n}\r\n\r\nexport const getStatusAPI = (userId:number) =>{\r\n    return instance.get('profile/status/'+userId)\r\n}\r\n\r\n\r\nexport const updateStatusAPI = (status:string) =>{\r\n    return instance.put('profile/status/', {status})\r\n}\r\n\r\nexport const loginAPI = (email:string, password:string, rememberMe = false, captcha = false) =>{\r\n    return instance.post<LoginResponseType>('auth/login', {email, password, rememberMe, captcha})\r\n}\r\n\r\nexport const getCapthaAPI = () =>{\r\n    return instance.get(\"/security/get-captcha-url\")\r\n}\r\nexport const exitAPI = () =>{\r\n    return instance.delete('auth/login')\r\n}\r\n\r\n\r\n//// DIALOGS\r\n\r\nexport const getDialogsAPI = () =>{\r\n    return instance.get('dialogs/')\r\n}\r\n\r\nexport const startDialogAPI = (userId:number) =>{\r\n    return instance.put(`dialogs/` + userId)\r\n}\r\n\r\nexport const getMessagesAPI = (userId:number, page = 1, count =20) =>{\r\n    return instance.get(`dialogs/${userId}/messages/?page=${page}&count=${count}`)\r\n}\r\n\r\nexport const sendMessageAPI = (userId:number, body:string) => {\r\n    return instance.post(`dialogs/${userId}/messages`, {body})\r\n}\r\n\r\nexport const deleteMessageAPI = (messageId:string) =>{\r\n    return instance.delete(`dialogs/messages/${messageId}`)\r\n}\r\n\r\n\r\n\r\n/// PROFILE\r\nexport const savePhotoAPI = (image:File) =>{\r\n    const formData = new FormData()\r\n    formData.append(\"image\", image)\r\n    return instance.put(`profile/photo`, formData, {\r\n        headers:{\r\n            'Content-type': 'multipart/form-data'\r\n        }\r\n    })\r\n}\r\n\r\nexport const saveProfileAPI = (profile:ProfileInfoType) =>{\r\n    return instance.put(\"profile/\", profile)\r\n}","import {followAPI, getUsers, unfollowAPI} from \"../dal/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst FOLLOW = \"FOLLOW\"\r\nconst UNFOLLOW = \"UNFOLLOW\"\r\nconst SET_USERS = \"SET_USERS\"\r\nconst SET_PAGE_USERS = \"SET_PAGE_USERS\"\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\"\r\nconst SET_LOADING = \"SET_LOADING\"\r\nconst SET_FOLLOW_LOADING = \"SET_FOLLOW_LOADING\"\r\nconst SET_CURRENT_TERM = \"SET_CURRENT_TERM\"\r\nconst SET_CURRENT_PAGE = \"users/SET_CURRENT_PAGE\"\r\n\r\nlet initialState = {\r\n    users: [] as any,\r\n    count: 7,\r\n    totalCount: null as number | null,\r\n    currentPage: 1,\r\n    isLoading: true,\r\n    followLoading: [] as Array<number>,\r\n    currentTerm: \"\" as string\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\n\r\nconst usersReducer = (state = initialState, action:ActionsType):initialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(// @ts-ignore\r\n                    u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map( // @ts-ignore\r\n                u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n\r\n                })\r\n            }\r\n\r\n        case SET_USERS:\r\n            return {\r\n                ...state, users: action.users\r\n            }\r\n        case SET_PAGE_USERS:\r\n            return {\r\n                ...state, currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state, totalCount: action.totalUsers\r\n            }\r\n\r\n        case SET_LOADING:\r\n            return {...state, isLoading: action.isLoading}\r\n        case SET_FOLLOW_LOADING:\r\n            return {\r\n                ...state,\r\n                followLoading: action.isFollowLoading\r\n                    ? [...state.followLoading, action.id]\r\n                    : state.followLoading.filter(id => id !== action.id)\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state, currentPage: action.currentPage\r\n            }\r\n        case SET_CURRENT_TERM:\r\n            return {...state, currentTerm: action.currentTerm}\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\ntype ActionsType = followType|unfollowType|setCurrentPageType|setUsersType|setPageUsersType|setTotalUsersCountType|setLoadingType|setFollowLoadingType|setCurrentTermType\r\n\r\ntype setCurrentTermType = {\r\n    type: typeof SET_CURRENT_TERM\r\n    currentTerm: string\r\n}\r\n\r\ntype followType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\ntype unfollowType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\ntype setCurrentPageType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\ntype setUsersType = {\r\n    type: typeof SET_USERS\r\n    users: any\r\n}\r\ntype setPageUsersType = {\r\n    type: typeof SET_PAGE_USERS\r\n    currentPage: number\r\n}\r\ntype setTotalUsersCountType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    totalUsers: number\r\n}\r\ntype setLoadingType = {\r\n    type: typeof SET_LOADING\r\n    isLoading: boolean\r\n}\r\ntype setFollowLoadingType = {\r\n    type: typeof SET_FOLLOW_LOADING\r\n    isFollowLoading: boolean\r\n    id: number\r\n}\r\n\r\nconst setCurrentTerm = (currentTerm:string):setCurrentTermType => ({type:SET_CURRENT_TERM, currentTerm})\r\nconst follow = (userId:number):followType => ({type: FOLLOW, userId})\r\nconst unfollow = (userId:number):unfollowType => ({type: UNFOLLOW, userId})\r\nconst setCurrentPage = (currentPage:number):setCurrentPageType=> ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setUsers = (users:any):setUsersType => ({type: SET_USERS, users})\r\nexport const setPageUsers = (currentPage:number):setPageUsersType => ({type: SET_PAGE_USERS, currentPage})\r\nexport const setTotalUsersCount = (totalUsers:number):setTotalUsersCountType => ({type: SET_TOTAL_USERS_COUNT, totalUsers})\r\nexport const setLoading = (isLoading:boolean):setLoadingType => ({type: SET_LOADING, isLoading})\r\nexport const setFollowLoading = (isFollowLoading:boolean, id:number):setFollowLoadingType => ({type: SET_FOLLOW_LOADING, isFollowLoading, id})\r\n\r\nexport const setUsersPage = (length:number, count:number, currentPage:number, term:string=\"\"):ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    if (length === 0) {\r\n        dispatch(setLoading(true))\r\n        dispatch(setCurrentTerm(term))\r\n        let data = await  getUsers(count, currentPage, term)\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n        dispatch(setLoading(false))\r\n        dispatch(setCurrentPage(currentPage))\r\n        dispatch(setPageUsers(currentPage))\r\n        dispatch(setUsers(data.items))\r\n    }\r\n}\r\nexport const setPageU = (count = 7, p:number, term:string=\"\"):ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    dispatch(setPageUsers(p))\r\n    dispatch(setLoading(true))\r\n    dispatch(setCurrentTerm(term))\r\n    let data = await getUsers(count, p, term)\r\n    dispatch(setLoading(false))\r\n    dispatch(setUsers(data.items))\r\n}\r\n\r\nexport const setFollow = (id:number):ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) =>{\r\n    dispatch(setFollowLoading(true, id))\r\n    let data = await unfollowAPI(id)\r\n    if (data.resultCode === 0) {\r\n        dispatch(setFollowLoading(false, id))\r\n        dispatch(follow(id))\r\n    }\r\n}\r\n\r\nexport const setUnfollow = (id:number):ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) =>{\r\n    dispatch(setFollowLoading(true, id))\r\n    let data = await followAPI(id)\r\n    if (data.resultCode === 0) {\r\n        dispatch(setFollowLoading(false, id))\r\n        dispatch(unfollow(id))\r\n    }\r\n}\r\nexport default usersReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"News_content__2vbxU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Music_content__3Nu-5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Settings_content__1Rhtf\"};","module.exports = __webpack_public_path__ + \"static/media/loading.dc8b2f5f.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"preloader_loading__2rBHo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textareaDialogs\":\"textarea_textareaDialogs__230z5\",\"error\":\"textarea_error__2rxoX\",\"alert\":\"textarea_alert__1PM9e\",\"TextareaProfile\":\"textarea_TextareaProfile__1HFjj\",\"alertProfile\":\"textarea_alertProfile__1XJBc\",\"input\":\"textarea_input__1mXDG\",\"alertLogin\":\"textarea_alertLogin__3ngPT\",\"textareaTodo\":\"textarea_textareaTodo__Dh-Oe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"line\":\"Navbar_line__1bAXw\",\"active\":\"Navbar_active__22X82\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {\r\n    friendsData : [\r\n        {id: 1 , name : \"Vanja\", img : \"https://semantic-ui.com/images/avatar/small/matt.jpg\" },\r\n        {id: 2 , name : \"Бараьан\", img : \"https://semantic-ui.com/images/avatar/small/elliot.jpg\"},\r\n        {id: 3 , name : \"Bro Bann\", img : \"https://semantic-ui.com/images/avatar/small/stevie.jpg\"},\r\n    ]\r\n}\r\n\r\nconst navbarReducer = (state = initialState, action:any) => {\r\n    return {...state}\r\n}\r\n\r\nexport default navbarReducer","import {exitAPI, getCapthaAPI, getLogin, getLoginInfo, loginAPI} from \"../dal/api\";\r\nimport {reset, stopSubmit} from 'redux-form';\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst SET_USER_DATA = \"SET_USER_DATA\"\r\nconst SET_USER_INFO = \"SET_USER_INFO\"\r\nconst SET_LOADING = \"SET_LOADING\"\r\nconst NEED_CAPTCHA = \"auth/NEED_CAPTCHA\"\r\nconst SET_AUTH = \"SET_AUTH\"\r\nconst SET_CAPTCHA_URL = \"SET_CAPTCHA_URL\"\r\n\r\nlet initialState={\r\n    id: null as number|null,\r\n    email: null as string|null,\r\n    login: null as string|null,\r\n    isAuth: false,\r\n    info: null as any,\r\n    loading: false,\r\n    needCaptcha: false,\r\n    captchaUrl: null as string|null,\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\n\r\nconst authReducer = (state = initialState, action:ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true,\r\n            }\r\n        case SET_USER_INFO :\r\n            return {...state, info: action.info}\r\n        case SET_LOADING:\r\n            return {...state, loading: action.boolean}\r\n        case SET_AUTH:\r\n            return {...state, isAuth: action.boolean}\r\n        case NEED_CAPTCHA:\r\n            return {...state, needCaptcha: true}\r\n        case SET_CAPTCHA_URL:\r\n            return {...state, captchaUrl: action.url}\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\ntype ActionsType = setUserDataType|setUserInfoType|setLoadingType|setAuthType|needCaptchaType|setCaptchaUrlType\r\n\r\ntype setUserDataDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n\r\n}\r\ntype setUserDataType = {\r\n    type: typeof SET_USER_DATA\r\n    data: setUserDataDataType\r\n}\r\ntype setUserInfoType = {\r\n    type: typeof SET_USER_INFO\r\n    info: any\r\n}\r\ntype setLoadingType = {\r\n    type: typeof SET_LOADING\r\n    boolean: boolean\r\n}\r\ntype setAuthType = {\r\n    type: typeof SET_AUTH\r\n    boolean: boolean\r\n}\r\ntype needCaptchaType = {\r\n    type: typeof NEED_CAPTCHA\r\n}\r\ntype setCaptchaUrlType = {\r\n    type: typeof SET_CAPTCHA_URL\r\n    url: string\r\n}\r\n\r\n\r\nexport const setUserData = (id:number, email:string, login:string):setUserDataType => ({type: SET_USER_DATA, data:{id, email, login }})\r\nexport const setUserInfo = (info:any):setUserInfoType => ({type: SET_USER_INFO, info})\r\nconst setLoading = (boolean:boolean): setLoadingType => ({type: SET_LOADING, boolean})\r\nconst setAuth = (boolean:boolean): setAuthType => ({type: SET_AUTH, boolean})\r\nconst needCaptcha = ():needCaptchaType => ({type:NEED_CAPTCHA})\r\nconst setCaptchaUrl = (url:string):setCaptchaUrlType => ({type:SET_CAPTCHA_URL, url})\r\n\r\nexport const setUser = (id:number):ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    let data = await getLogin()\r\n    if (data.resultCode === 0){\r\n        let {id, email, login} = data.data\r\n        dispatch(setUserData(id, email, login))\r\n\r\n        let response = await getLoginInfo(id)\r\n        dispatch(setUserInfo(response.data))\r\n}}\r\n\r\nexport const setLogin = (email:string, password:string, rememberMe:boolean, captcha:boolean):ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    dispatch(setLoading(true))\r\n    let response = await  loginAPI(email, password, rememberMe, captcha)\r\n         if(response.data.resultCode === 0){\r\n             dispatch(setLoading(false))\r\n             dispatch(setAuth(true))\r\n             window.location.reload()\r\n         }\r\n        else{\r\n            if (response.data.resultCode === 10){\r\n                dispatch(getCaptha())\r\n            }\r\n             dispatch(reset(\"login\"))\r\n             let message = response.data.messages.length > 0 ? response.data.messages[0]: \"Server problem\"\r\n             dispatch(stopSubmit(\"login\", {_error:message}))\r\n        }\r\n}\r\n\r\nexport const exit = ():ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) =>{\r\n    let response = await exitAPI()\r\n        if(response.data.resultCode === 0){\r\n            dispatch(setAuth(false))\r\n            window.location.reload()\r\n        }\r\n}\r\n\r\nexport const getCaptha = ():ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) =>{\r\n    dispatch(needCaptcha())\r\n    let response = await getCapthaAPI()\r\n    dispatch(setCaptchaUrl(response.data.url))\r\n}\r\nexport default authReducer\r\n\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport navbarReducer from \"./navbarReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {reducer as formReducer} from \"redux-form\"\r\n\r\nlet reducers = combineReducers({\r\n        profilePage: profileReducer,\r\n        dialogsPage: dialogsReducer,\r\n        navBar: navbarReducer,\r\n        users: usersReducer,\r\n        auth: authReducer,\r\n        form: formReducer,\r\n    }\r\n)\r\n\r\ntype reducersType = typeof reducers\r\nexport type AppStateType = ReturnType<reducersType>\r\n\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nlet store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n\r\n// @ts-ignore\r\nexport default store","import React from \"react\";\r\nimport s from './News.module.css';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ul>\r\n                <h1>WOWOW NEWS</h1>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport s from './Music.module.css';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ul>\r\n                <h1>WOWOW MUSIC</h1>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React, {useState} from \"react\";\r\nimport s from './Settings.module.css';\r\n\r\nconst Settings:React.FC = () => {\r\n    let [number, setNumber] = useState<number>(0)\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <ul>\r\n                <h1>WOWOW SETTINGS</h1>\r\n                {number}\r\n                <button onClick={() => {setNumber(number+1)}}>+1</button>\r\n                <button onClick={() => {setNumber(number-1)}}>-1</button>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import React from \"react\";\r\nimport s from \"./FriendsNav.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport defaultUserImg from \"./../../../media/images/user.png\"\r\n\r\ntype PropsType = {\r\n    id:number\r\n    img:string\r\n}\r\n\r\nconst FriendsNav:React.FC<PropsType> = ({id, img}) =>{\r\n    return(\r\n        <div className={s.friends}>\r\n            <NavLink to={\"/friends/\" + id} >\r\n                <img src={img || defaultUserImg} alt='' className={s.img}/>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FriendsNav;","import React from \"react\";\r\nimport s from \"./Navbar.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport FriendsNav from \"./FriendsNav/FriendsNav\";\r\n\r\ntype PropsType = {\r\n    friendsData: Array<{\r\n        img: string\r\n        id: number\r\n    }>\r\n}\r\n\r\nconst Navbar:React.FC<PropsType> = ({friendsData}) => {\r\n\r\n    let friendsElements = friendsData.map(friend => <FriendsNav img ={friend.img}  id = {friend.id} key = {friend.id}/>)\r\n\r\n  return (\r\n    <nav className={s.nav}>\r\n      <NavLink to=\"/profile\" activeClassName={s.active}>\r\n        Profile\r\n        <br />\r\n      </NavLink>\r\n      <NavLink to=\"/messages\" activeClassName={s.active}>\r\n        Messages\r\n        <br />\r\n      </NavLink>\r\n        <NavLink to=\"/todo\" activeClassName={s.active}>\r\n            Todo list\r\n            <br />\r\n        </NavLink>\r\n        <NavLink to=\"/users\" activeClassName={s.active}>\r\n            Users\r\n            <br/>\r\n        </NavLink>\r\n      <NavLink to=\"/news\" activeClassName={s.active}>\r\n        News\r\n        <br />\r\n      </NavLink>\r\n      <NavLink to=\"/music\" activeClassName={s.active}>\r\n        Music\r\n        <br />\r\n      </NavLink>\r\n      <div className={s.line}></div>\r\n      <NavLink to=\"/settings\" activeClassName={s.active}>\r\n        Settings\r\n      </NavLink>\r\n\r\n      <div>\r\n          <div className={s.line}></div>\r\n          <NavLink to=\"/friends\" activeClassName={s.active}>\r\n              Friends\r\n          </NavLink>\r\n\r\n          {friendsElements}\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import Navbar from \"./Navbar\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state:AppStateType) =>{\r\n    return{\r\n        friendsData: state.navBar.friendsData\r\n    }\r\n}\r\n\r\nconst NavbarContainer = connect(mapStateToProps)(Navbar)\r\n\r\nexport default NavbarContainer","import React from \"react\";\r\nimport s from \"./Header.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport DefaultUserImg from \"./../../media/images/user.png\"\r\n\r\n\r\ntype PropsType = {\r\n    isAuth:boolean\r\n    id:number | null\r\n    getProfile: (id:number|any) => void\r\n    exit:() => void\r\n    login:string | null\r\n    profileInfo: {\r\n        photos: {\r\n            small:string\r\n            large:string\r\n        }\r\n    }\r\n}\r\n\r\nconst Header:React.FC<PropsType> = ({isAuth, profileInfo, id, getProfile, exit, login}) => {\r\n    if(isAuth){\r\n        if (!profileInfo) {\r\n            return <Preloader/>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src=\"https://icon-library.com/images/github-icon-white/github-icon-white-6.jpg\"\r\n                alt=\"logo\"\r\n                height=\"34px\"\r\n            />\r\n            {!isAuth\r\n                ? <NavLink to=\"/login\" className={s.Login}>\r\n                    <button className={s.loginButton}>Login</button>\r\n                </NavLink>\r\n                :<>\r\n                    <NavLink to={`/profile/${id}`} onClick = {()=>{getProfile(id)}}>\r\n                        <button className={s.exit} onClick={exit}>exit</button>\r\n                        <div className={s.info}>\r\n                            <img src={profileInfo.photos.small !== null ? profileInfo.photos.small : DefaultUserImg}\r\n                             alt=\"\" className={s.avatar}/>\r\n                            <div className={s.login}>{login}</div>\r\n                        </div>\r\n                </NavLink>\r\n                </>}\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {exit, setUser} from \"../../redux/authReducer\";\r\nimport Header from \"./Header\";\r\nimport {getProfile} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth:boolean\r\n    login:string | null\r\n    id:null| number\r\n    info:any\r\n    img: string\r\n}\r\ntype MapDispatchToPropsType = {\r\n    setUser: (userId:number|any) => void\r\n    getProfile: (userId:number) => void\r\n    exit: () => void\r\n\r\n}\r\n\r\ntype HeaderContainerType = MapStateToPropsType&MapDispatchToPropsType\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType>{\r\n\r\n    componentDidMount() {\r\n        this.props.setUser(this.props.id)\r\n    }\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props} isAuth = {this.props.isAuth} login ={this.props.login} exit = {this.props.exit}\r\n                       id = {this.props.id}  profileInfo ={this.props.info} getProfile = {this.props.getProfile}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:AppStateType) =>{return{\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n    id: state.auth.id,\r\n    info: state.auth.info,\r\n}}\r\n\r\n\r\nexport default connect(mapStateToProps, {setUser, getProfile, exit})(HeaderContainer)","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport s from \"./Login.module.css\"\r\nimport {required} from \"../../addons/validators/validators\";\r\nimport {InputLogin} from \"../common/Textarea\";\r\n\r\ntype PropsType = {\r\n    handleSubmit:any\r\n    isAuth: boolean\r\n    captchaUrl:string\r\n    error:any\r\n    needCaptcha:boolean\r\n}\r\n\r\nconst LoginForm:React.FC<PropsType> = ({handleSubmit,isAuth,captchaUrl,error,needCaptcha}) =>{\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <label>E-mail</label>\r\n            <div>\r\n                <Field id =\"email\" placeholder={\"Email\"} name = {\"email\"} component = {InputLogin} type={\"email\"} disabled={isAuth} className = {s.input} validate = {[required]}/>\r\n            </div>\r\n            <label>Password</label>\r\n            <div>\r\n                <Field id={\"password\"} placeholder={\"Password\"} className = {s.input} name = {\"password\"} component = {InputLogin} type={\"password\"} disabled={isAuth} data-validate =\"passsword\" validate = {[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field type= {\"checkbox\"} name = {\"rememberMe\"} component = {\"input\"} disabled={isAuth} className={s.rememberMe}/> remember me\r\n            </div>\r\n            {error &&\r\n            <div className={s.fieldError}>\r\n                <span>{error}</span>\r\n            </div>\r\n            }\r\n            {needCaptcha &&<div>\r\n                <><img src={captchaUrl?captchaUrl:\"\"} width={\"200px\"} alt=\"\"/>\r\n                <Field placeholder={\"captcha\"} component={InputLogin} name={\"captcha\"} validate={[required]}/></>\r\n            </div>}\r\n            <div>\r\n                <button disabled={isAuth} className={s.button}>Login</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state:any) =>({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nconst LoginReduxForm = compose(\r\n    connect(mapStateToProps,{}),\r\n    reduxForm<PropsType>({form:\"login\"}),\r\n)(LoginForm)\r\nexport default LoginReduxForm","import React from \"react\";\r\nimport LoginReduxForm from \"./LoginForm\"\r\nimport {connect} from \"react-redux\";\r\nimport {setLogin} from \"../../redux/authReducer\";\r\nimport s from \"./Login.module.css\"\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string\r\n    needCaptcha: boolean\r\n}\r\n\r\ntype MapDistatchPropsType = {\r\n    setLogin: (email:string, password: string, rememberMe:boolean, captcha:boolean) => void\r\n}\r\ntype LoginType = MapStateToPropsType&MapDistatchPropsType\r\n\r\nconst Login:React.FC<LoginType> = ({needCaptcha, captchaUrl, setLogin, isAuth}) => {\r\n    const onSubmit = (formData:any) =>{\r\n        setLogin(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (isAuth){\r\n        return <Redirect to = \"profile\"/>\r\n    }\r\n    return (\r\n        <div className={s.form}>\r\n            <h1>Login</h1>\r\n            {/*/@ts-ignore/*/}\r\n            <LoginReduxForm onSubmit = {onSubmit} needCaptcha = {needCaptcha} captchaUrl={captchaUrl}/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state:any) =>({\r\n    isAuth: state.auth.isAuth,\r\n    needCaptcha: state.auth.needCaptcha,\r\n    captchaUrl: state.auth.captchaUrl,\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {setLogin})(Login)","import Preloader from \"../components/common/Preloader/Preloader\";\r\nimport React from \"react\";\r\n\r\nconst withSuspense = Component => {\r\n    return (props) => {\r\n        return(\r\n        <React.Suspense fallback={<Preloader/>}>\r\n            <Component {...props}/>\r\n        </React.Suspense>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withSuspense\r\n","import React from \"react\";\nimport \"./App.css\";\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport NavbarContainer from \"./components/Navbar/NavbarContainer\";\nimport HeaderContainer from \"./components/header/headerContainer\";\nimport Login from \"./components/Login/Login\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {get_initialize} from \"./redux/appReducer\";\nimport withSuspense from \"./hoc/suspense\";\n\n\nconst UsersContainer = React.lazy(()=>import(\"./components/Users/UsersContainer\"))\nconst ProfileContainer = React.lazy(()=>import(\"./components/profile/ProfileContainer\"))\nconst DialogsContainer = React.lazy(()=>import(\"./components/Dialogs/DialogsContainer\"))\nconst Todo = React.lazy(()=>import(\"./components/Todo/Todo\"))\n\n\nclass App extends React.Component{\n  render() {\n\n    return (\n        <HashRouter>\n          <div>\n            <HeaderContainer />\n            <div className=\"app-wrapper\">\n              <NavbarContainer/>\n              {/*Main*/}\n              <Switch>\n                <Redirect  exact from={\"/\"} to ={\"/profile\"}/>\n                <Route path=\"/profile/:userId?\" render={withSuspense(ProfileContainer)}/>\n                <Route path=\"/messages/:userId?\" render={withSuspense(DialogsContainer)} />\n                <Route path=\"/users\" render={withSuspense(UsersContainer)}/>\n                <Route path=\"/todo\" render = {withSuspense(Todo)}/>\n\n                {/*Other*/}\n\n                <Route path=\"/news\" render={() => <News />} />\n                <Route path=\"/music\" render={() => <Music />} />\n                <Route path=\"/settings\" render={() => <Settings />} />\n                <Route path=\"/login\" render={() => <Login/>}/>\n                <Route path = \"*\" render={ () => <h1>404 not found</h1>}/>\n\n              </Switch>\n\n            </div>\n          </div>\n        </HashRouter>\n    );\n  }\n};\n\n// let mapStateToProps = (state) => ({\n//   initialized : state.app.initialized\n// })\n\nexport default compose(\n    connect(null, {get_initialize}),\n\n)(App)\n","import \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport store from \"./redux/redux-store\";\r\nimport ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__1Oh5U\",\"button\":\"Login_button__2_eM6\",\"rememberMe\":\"Login_rememberMe__3aWVM\",\"fieldError\":\"Login_fieldError__3az9n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3NAvV\",\"loginButton\":\"Header_loginButton__3RPYY\",\"avatar\":\"Header_avatar__aCxSy\",\"login\":\"Header_login__jfCh5\",\"info\":\"Header_info__1wrJ6\",\"exit\":\"Header_exit__3CmDp\"};","module.exports = __webpack_public_path__ + \"static/media/user.7cc7a630.png\";","import React from \"react\";\r\nimport loading from \"../../../media/images/loading.svg\";\r\nimport s from \"./preloader.module.css\"\r\n\r\nconst Preloader = () =>{\r\n    return(\r\n        <img src={loading} alt =\"\" className={s.loading}/>\r\n    )\r\n}\r\nexport default Preloader","export const minLengthValidator = (minLength:number) => (value:any) => {\r\n    if (value && value.length < minLength) return `MIN LENGTH = ${minLength}`\r\n    return undefined\r\n}\r\n\r\nexport const required = (value:any) =>{\r\n    if(value) return undefined\r\n    return \"Field is required\"\r\n}\r\nexport const maxLengthValidator = (maxLength:number) => (value:any) =>{\r\n    if (value && value.length <= maxLength) return undefined\r\n    return `Max lenght - ${maxLength} symbols`\r\n}","import React from \"react\";\r\nimport s from \"./textarea.module.css\"\r\n\r\nexport const TextareaDialogs = ({input, meta, ...props}) =>{\r\n    return (\r\n        <div >\r\n            <textarea {...input} className={s.textareaDialogs + \" \" + (meta.touched && meta.error ? s.error : \"\")}/>\r\n            {meta.touched && meta.error\r\n                && <div className={s.alert}>\r\n                {meta.error}\r\n                </div>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextareaProfile = ({input, meta, ...props}) =>{\r\n    return (\r\n        <div >\r\n            <textarea {...input} {...props} className={s.TextareaProfile + \" \" + (meta.touched && meta.error ? s.error : \"\")}/>\r\n            {meta.touched && meta.error\r\n            && <div className={s.alertProfile}>\r\n                {meta.error}\r\n            </div>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const InputLogin = ({input, meta, ...props}) =>{\r\n    return (\r\n        <div >\r\n            <input {...input} {...props} className={s.input + \" \" + (meta.touched && meta.error ? s.error : \"\")}/>\r\n            {meta.touched && meta.error\r\n            && <div className={s.alertLogin}>\r\n                {meta.error}\r\n            </div>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextareaTodo = ({input, meta, ...props}) =>{\r\n    return (\r\n        <div >\r\n            <textarea {...input} {...props} className={s.textareaTodo + \" \" + (meta.touched && meta.error ? s.error : \"\")}/>\r\n            {meta.touched && meta.error\r\n            && <div className={s.alertTodo}>\r\n                {meta.error}\r\n            </div>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const InputProfileData = ({input, meta, ...props}) =>{\r\n    return (\r\n        <div >\r\n            <input {...input} {...props} className={(meta.touched && meta.error ? s.error : \"\")}/>\r\n            {meta.touched && meta.error\r\n            && <div className={s.alertLogin}>\r\n                {meta.error}\r\n            </div>}\r\n\r\n        </div>\r\n    )\r\n}","import {getProfileInfo, getStatusAPI, savePhotoAPI, saveProfileAPI, updateStatusAPI} from \"../dal/api\";\r\nimport {reset, stopSubmit} from \"redux-form\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst ADD_POST = \"ADD-POST\"\r\nconst SET_PROFILE = \"SET_PROFILE\"\r\nconst SET_STATUS = \"SET_STATUS\"\r\nconst DELETE_POST = \"DELETE_POST\"\r\nconst SAVE_PHOTO_DONE = \"profile/SAVE_PHOTO_DONE\"\r\nconst SET_PHOTO_LOADING = \"profile/SET_PHOTO_LOADING\"\r\n\r\n\r\n\r\ntype profileInfoType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type initialStateType = {\r\n    postData: Array<postDataType>\r\n    profileInfo: null | Array<profileInfoType>\r\n    profileInfoLoading: null | boolean\r\n    status: string\r\n    photoLoading: boolean\r\n\r\n}\r\n\r\ntype postDataType = {\r\n    id: null | number\r\n    author_image: null | string\r\n    author: null | string\r\n    text: null | string\r\n    date: null | string\r\n    like_count: null | number\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n        postData : [\r\n            {\r\n                id: 6,\r\n                author_image: \"https://semantic-ui.com/images/avatar/small/stevie.jpg\",\r\n                author: \"Stevie Folls\",\r\n                text: \"ddd DAS\",\r\n                date: \"1 month ago\",\r\n                like_count: 6\r\n            },\r\n            {\r\n                id: 5,\r\n                author_image: \"https://semantic-ui.com/images/avatar/small/stevie.jpg\",\r\n                author: \"Stevie Folls\",\r\n                text: \"HAHA NUBB\",\r\n                date: \"1 month ago\",\r\n                like_count: 5\r\n            },\r\n            {\r\n                id: 4,\r\n                author_image: \"https://semantic-ui.com/images/avatar/small/stevie.jpg\",\r\n                author: \"Stevie Folls\",\r\n                text: \"Stupid monkey...\",\r\n                date: \"1 month ago\",\r\n                like_count: 11\r\n            },\r\n            {\r\n                id: 3,\r\n                author_image: \"https://semantic-ui.com/images/avatar/small/stevie.jpg\",\r\n                author: \"Stevie Folls\",\r\n                text: \"BLABLBLALBL\",\r\n                date: \"1 month ago\",\r\n                like_count: 11\r\n            },\r\n            {\r\n                id: 2,\r\n                author_image: \"https://semantic-ui.com/images/avatar/small/elliot.jpg\",\r\n                author: \"Stas Jordan\",\r\n                text: \":)\",\r\n                date: \"1 day ago\",\r\n                like_count: 32\r\n            },\r\n            {\r\n                id: 1,\r\n                author_image: \"https://semantic-ui.com/images/avatar/small/matt.jpg\",\r\n                author: \"Vanja Hodynchuk\",\r\n                text: \"Very cool bro\",\r\n                date: \"now\",\r\n                like_count: 1\r\n            },\r\n        ],\r\n        profileInfo : null,\r\n        profileInfoLoading: false,\r\n        status: \"\",\r\n        photoLoading: false,\r\n    }\r\n\r\nconst profileReducer = (state=initialState, action:ActionsType) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 7,\r\n                author: \"Unknown user\",\r\n                author_image: \"https://image.flaticon.com/icons/png/512/37/37943.png\",\r\n                text: action.postText,\r\n                date: \"now\",\r\n                like_cout: 0,\r\n            }\r\n            return {...state, postData:[...state.postData, newPost]}\r\n        }\r\n        case SET_PROFILE: {\r\n            return {...state, profileInfo: action.profileInfo}\r\n        }\r\n        case SET_STATUS: {\r\n            return {...state, status: action.status}\r\n        }\r\n        case DELETE_POST: {\r\n            // eslint-disable-next-line\r\n            return {...state, postData: state.postData.filter(id=> id.id != action.id)}\r\n        }\r\n        case SAVE_PHOTO_DONE: {\r\n            return {...state, profileInfo: {...state.profileInfo, photos: action.file}}\r\n        }\r\n        case SET_PHOTO_LOADING:{\r\n            return {...state, photoLoading: action.boolean}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\ntype ActionsType = addPost1Type|setProfileType|setStatusType|savePhotoDoneType|deletePostType|setPhotoLoadingType\r\n\r\ntype addPost1Type = {\r\n    type: typeof ADD_POST\r\n    postText: string\r\n}\r\n\r\ntype setProfileType = {\r\n    type: typeof SET_PROFILE\r\n    profileInfo: Array<profileInfoType>\r\n}\r\ntype setStatusType = {\r\n    type: typeof SET_STATUS\r\n    status: string | null\r\n}\r\ntype savePhotoDoneType = {\r\n    type: typeof SAVE_PHOTO_DONE\r\n    file: File\r\n}\r\ntype deletePostType = {\r\n    type: typeof DELETE_POST\r\n    id: number\r\n}\r\ntype setPhotoLoadingType = {\r\n    type: typeof SET_PHOTO_LOADING\r\n    boolean: boolean\r\n}\r\n\r\n/*ACTION CREATORS FOR PROFILE/POSTS*/\r\nexport const addPost1 = (postText:string):addPost1Type => ({type: ADD_POST, postText})\r\nexport const setProfile = (profileInfo: Array<profileInfoType>):setProfileType => ({type: SET_PROFILE, profileInfo})\r\nexport const setStatus = (status: string | null):setStatusType => ({type:SET_STATUS, status})\r\nexport const savePhotoDone = (file: File):savePhotoDoneType => ({type:SAVE_PHOTO_DONE, file})\r\nexport const deletePost = (id: number): deletePostType => ({type:DELETE_POST, id})\r\nconst setPhotoLoading = (boolean: boolean):setPhotoLoadingType  => ({type:SET_PHOTO_LOADING, boolean})\r\n\r\n\r\nexport const getStatus = (userId: number):ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) =>{\r\n    let response = await getStatusAPI(userId)\r\n    dispatch(setStatus(response.data))\r\n}\r\n\r\nexport const updateStatus = (status: string):ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) =>{\r\n    let response = await  updateStatusAPI(status)\r\n    if(response.data.resultCode === 0){\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\n\r\n\r\nexport const getProfile = (userId:number):ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) =>{\r\n    let response = await getProfileInfo(userId)\r\n    dispatch(setProfile(response.data))\r\n}\r\n\r\nexport const addPost = (postText:string):ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) =>{\r\n    dispatch(addPost1(postText))\r\n    // @ts-ignore\r\n    dispatch(reset('postForm'))\r\n}\r\n\r\nexport const saveProfile = (profile:any,userId:number):ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) =>{\r\n    let response = await saveProfileAPI(profile)\r\n    if(response.data.resultCode === 0){\r\n        dispatch(getProfile(userId))\r\n        // @ts-ignore\r\n        dispatch(reset('profileData'))\r\n    }else{\r\n        // @ts-ignore\r\n        dispatch(stopSubmit(\"profileData\", {_error: response.data.messages[0]}))\r\n        return Promise.reject(response.data.messages[0])\r\n    }\r\n\r\n}\r\n\r\nexport const savePhoto = (file:any):ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) =>{\r\n    dispatch(setPhotoLoading(true))\r\n    let response = await savePhotoAPI(file)\r\n    if(response.data.resultCode === 0){\r\n        dispatch(savePhotoDone(response.data.data.photos))\r\n        dispatch(setPhotoLoading(false))\r\n    }\r\n}\r\n\r\nexport default profileReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"FriendsNav_img__SQ3sL\"};","import {\r\n    deleteMessageAPI,\r\n    getDialogsAPI,\r\n    getMessagesAPI,\r\n    sendMessageAPI,\r\n    startDialogAPI\r\n} from \"../dal/api\";\r\nimport {reset} from \"redux-form\"\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst DIALOGS_LOADING = \"DIALOGS_LOADING\"\r\nconst GET_DIALOGS = \"GET_DIALOGS\"\r\nconst GET_MESSAGES = \"GET_MESSAGES\"\r\nconst SET_MESSAGES_LOADING = \"dialogs/SET_MESSAGES_LOADING\"\r\n\r\nlet initialState = {\r\n    dialogsData : [] as any,\r\n    messageData : [] as any,\r\n    dialogsLoading: true,\r\n    messagesLoading: false,\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state = initialState, action:ActionsType):initialStateType => {\r\n    switch (action.type) {\r\n        case GET_DIALOGS:\r\n            return {...state, dialogsData: action.dialogs}\r\n        case DIALOGS_LOADING:\r\n            return {...state, dialogsLoading: action.boolean}\r\n        case GET_MESSAGES:\r\n            return {...state, messageData: action.messageList.reverse()}\r\n        case SET_MESSAGES_LOADING:\r\n            return {...state, messagesLoading: action.boolean}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n/*ACTION CREATORS FOR DIALOGS/MESSAGES*/\r\n\r\ntype ActionsType = getDialogsType|dialogsLoadingType|messagesLoadingType|getMessagesType\r\n\r\ntype getDialogsType = {\r\n    type: typeof GET_DIALOGS\r\n    dialogs: any\r\n}\r\ntype dialogsLoadingType = {\r\n    type: typeof DIALOGS_LOADING\r\n    boolean: boolean\r\n}\r\ntype messagesLoadingType = {\r\n    type: typeof SET_MESSAGES_LOADING\r\n    boolean: boolean\r\n}\r\ntype getMessagesType = {\r\n    type: typeof GET_MESSAGES\r\n    messageList:any\r\n}\r\n\r\n\r\nexport const getDialogs = (dialogs:any):getDialogsType => ({type: GET_DIALOGS, dialogs})\r\nexport const dialogsLoading = (boolean:boolean):dialogsLoadingType =>({type:DIALOGS_LOADING, boolean})\r\nexport const messagesLoading = (boolean:boolean):messagesLoadingType =>({type:SET_MESSAGES_LOADING, boolean})\r\nexport const getMessages = (messageList:any):getMessagesType => ({type:GET_MESSAGES , messageList})\r\n\r\nexport const getDialogsPage = ():ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    dispatch(dialogsLoading(true))\r\n    let response = await getDialogsAPI()\r\n    dispatch(getDialogs(response.data))\r\n    dispatch(dialogsLoading(false))\r\n}\r\n\r\nexport const startDialog = (userId:number):ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    await startDialogAPI(userId)\r\n}\r\n\r\nexport const getMessagesList = (userId:number):ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) =>{\r\n    dispatch(messagesLoading(true))\r\n    let response = await  getMessagesAPI(userId)\r\n    dispatch(getMessages(response.data.items))\r\n    dispatch(messagesLoading(false))\r\n}\r\nexport const sendMessage = (userId:number, body:string):ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) =>{\r\n    await sendMessageAPI(userId, body)\r\n    // @ts-ignore\r\n    dispatch(reset(\"sendMessage\"))\r\n}\r\n\r\nexport const deleteMessage = (messageId:string):ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) =>{\r\n    await deleteMessageAPI(messageId)\r\n}\r\n\r\n\r\nexport default dialogsReducer"],"sourceRoot":""}