{"version":3,"sources":["hoc/withAuthRedirect.js","components/profile/posts/Posts.module.css","components/profile/Profile.module.css","components/profile/ProfileInfo/ProfileInfo.module.css","components/profile/ProfileInfo/ProfileDataForm.module.css","components/profile/ProfileInfo/ProfileStatus.jsx","components/profile/ProfileInfo/ProfileDataForm.jsx","components/profile/ProfileInfo/ProfileInfo.jsx","components/profile/posts/post/Post.jsx","components/profile/posts/PostForm.jsx","components/profile/posts/Posts.jsx","components/profile/posts/PostsContainer.jsx","components/profile/Profile.jsx","components/profile/ProfileContainer.jsx"],"names":["withAuthRedirect","Component","AuthRedirect","this","props","isAuth","to","React","connect","mapStateToProps","state","auth","module","exports","ProfileStatus","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","target","value","minLength1","minLengthValidator","maxLength60","maxLengthValidator","maxLength150","ProfileDataForm","reduxForm","form","handleSubmit","error","onSubmit","className","s","Field","placeholder","component","InputProfileData","name","validate","type","TextareaProfile","save","ProfileInfo","profileInfo","Preloader","photoLoading","pic","src","photos","large","DefaultUserImg","width","alt","isOwner","upload","unselectable","summary","button","onClick","files","length","savePhoto","inputPhoto","formData","saveProfile","userId","then","initialValues","text","fullName","contacts","instagram","lookingForAJob","lookingForAJobDescription","aboutMe","Post","author_image","author","date","like_count","maxLength300","PostFormRedux","textarea","rows","cols","required","cominput","Posts","memo","postsElemets","data","reverse","map","post","key","id","content","addPost","postMessage","PostsContainer","profilePage","postData","Profile","ProfileContainer","reGetProfile","match","params","getProfile","getStatus","prevProps","prevState","snapshot","profileInfoLoading","compose","withRouter"],"mappings":"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","file":"static/js/3.bee55389.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nexport const withAuthRedirect = (Component) =>{\r\n    class AuthRedirect extends React.Component{\r\n        render() {\r\n            if (!this.props.isAuth){return <Redirect to=\"/login\"/>}\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    let AuthConnectedRedirect = connect(mapStateToProps)(AuthRedirect)\r\n    return AuthConnectedRedirect\r\n}\r\n\r\nconst mapStateToProps = (state) =>({\r\n    isAuth: state.auth.isAuth\r\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"Posts_textarea__GKj3r\",\"cominput\":\"Posts_cominput__BMiSf\",\"text\":\"Posts_text__1PTc8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__lT-26\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__1DCnB\",\"pic\":\"ProfileInfo_pic__2j4Tv\",\"text\":\"ProfileInfo_text__22XSw\",\"inputPhoto\":\"ProfileInfo_inputPhoto__119TB\",\"summary\":\"ProfileInfo_summary__2LNG1\",\"unselectable\":\"ProfileInfo_unselectable__NnFUj\",\"upload\":\"ProfileInfo_upload__117_9\",\"button\":\"ProfileInfo_button__26ISU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ProfileDataForm_form__1pdeO\",\"save\":\"ProfileDataForm_save__1A9DV\"};","import React, {useState, useEffect} from \"react\";\r\n\r\nconst ProfileStatus = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect( () =>{\r\n        setStatus(props.status)\r\n    }, [props.status] )\r\n\r\n    let setEditModeValue = () => {setEditMode(true)}\r\n\r\n    let unSetEditMode = () =>{\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    let onChange = (e) =>{setStatus(e.target.value)}\r\n\r\n        return (\r\n            <>\r\n                {!editMode &&\r\n                    <span onDoubleClick={setEditModeValue}><b>Status</b>: {props.status !== null? props.status: \"â€Ž\"}</span>\r\n                }\r\n                {editMode &&\r\n                     <span><b>Status</b>:<input autoFocus={true} onBlur={unSetEditMode} onChange={onChange}\r\n                         value={status}/></span>\r\n                }\r\n            </>\r\n        )\r\n\r\n}\r\n\r\nexport default ProfileStatus","import React from 'react'\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {InputProfileData, TextareaProfile} from \"../../common/Textarea\";\r\nimport {maxLengthValidator, minLengthValidator} from \"../../../addons/validators/validators\";\r\nimport s from \"./ProfileDataForm.module.css\"\r\n\r\nlet minLength1 = minLengthValidator(1)\r\nlet maxLength60 = maxLengthValidator(60)\r\nlet maxLength150 = maxLengthValidator(150)\r\n\r\nconst ProfileDataForm1 = ({handleSubmit, error}) =>{\r\n    return(\r\n        <form onSubmit={handleSubmit} className={s.form}>\r\n            <label>Full name</label>\r\n            <Field placeholder={\"Full name\"} component={InputProfileData} name={\"fullName\"}validate={[minLength1, maxLength60]}></Field>\r\n            <label>Instagram</label>\r\n            <Field placeholder={\"Instagram\"} component={InputProfileData} name={\"contacts.instagram\"}></Field>\r\n            <label>lookingForAJob </label>\r\n            <Field placeholder={\"lookingForAJob\"} type={\"checkbox\"} component={\"input\"} name={\"lookingForAJob\"}></Field>\r\n            <br/><br/>\r\n            <label>Description</label>\r\n            <Field placeholder={\"Description\"} component={TextareaProfile} name={\"lookingForAJobDescription\"} validate={[minLength1, maxLength150]}></Field>\r\n\r\n            <label>About me </label>\r\n            <Field placeholder={\"About me\"} component={InputProfileData} name={\"aboutMe\"} validate={[minLength1, maxLength150]}></Field>\r\n            <button className={s.save}>Save</button>\r\n            {error &&<div>{error}</div>}\r\n        </form>\r\n    )\r\n}\r\nlet ProfileDataForm = reduxForm({form:\"profileData\"})(ProfileDataForm1)\r\n\r\nexport default ProfileDataForm","import React, {useState} from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport DefaultUserImg from \"./../../../media/images/user.png\"\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profileInfo){\r\n        return <Preloader/>\r\n    }\r\n    const onSetPhoto = (e) =>{\r\n        if(e.target.files.length){\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) =>{\r\n        props.saveProfile(formData, props.profileInfo.userId).then(\r\n            () =>{\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n    if(props.photoLoading){\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <img\r\n                className={s.pic}\r\n                src={props.profileInfo.photos.large !==null ? props.profileInfo.photos.large:DefaultUserImg}\r\n                width=\"160px\"\r\n                alt=\"\"\r\n            />\r\n\r\n            {props.isOwner && <>\r\n            <details className={s.upload}>\r\n                <summary className={s.unselectable + \" \" + s.summary}>Edit</summary>\r\n\r\n                <button className={s.button} onClick={()=>{setEditMode(!editMode)}}>{!editMode\r\n                    ? <span>Edit profile</span>\r\n                    : <span>Cancel</span>}\r\n                </button>\r\n\r\n                {editMode &&<input type={\"file\"} onChange={onSetPhoto} className={s.inputPhoto}/>}\r\n            </details>\r\n            </>\r\n            }\r\n\r\n            {editMode\r\n                ?<ProfileDataForm onSubmit = {onSubmit} initialValues={props.profileInfo}/>\r\n                :<div className={s.text}>\r\n                    <h2>{props.profileInfo.fullName !==null ? props.profileInfo.fullName : \"â€Ž\"}</h2>\r\n                    <ProfileStatus isAuth = {props.isAuth} status = {props.status} updateStatus = {props.updateStatus} userId = {props.userId}/>\r\n                    <br/>\r\n                    <b>Instagram</b> : {props.profileInfo.contacts.instagram !==null ? props.profileInfo.contacts.instagram: \"â€Ž\"}\r\n                    <br/>\r\n                    <b>Looking for a job</b> : {props.profileInfo.lookingForAJob ? <span>&#9745;</span> : <span>&#9746;</span>}\r\n                    <br/>\r\n                    <b>Description</b> : {props.profileInfo.lookingForAJobDescription !==null ? <span>{props.profileInfo.lookingForAJobDescription}</span> : \" \"}\r\n                    <br/>\r\n                    <b>About me</b>: {props.profileInfo.aboutMe !== null? props.profileInfo.aboutMe: \"â€Ž\"}\r\n                    <br/>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className=\"comment\">\r\n      <NavLink className=\"avatar\" to=\"/#\">\r\n        <img src={props.author_image} alt=\"\" />\r\n      </NavLink>\r\n      <div className=\"content\">\r\n        <NavLink className=\"author\" to=\"/#\">\r\n          {props.author}\r\n        </NavLink>\r\n        <div className=\"metadata\">\r\n          <span className=\"date\">{props.date}</span>\r\n        </div>\r\n        <div className=\"text\">{props.text}</div>\r\n        <div className=\"actions\">\r\n          <NavLink className=\"reply\" to=\"/#\">\r\n            Reply\r\n          </NavLink>\r\n          <NavLink className=\"reply\" to=\"/#\">\r\n            {props.like_count} Likes\r\n          </NavLink>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport s from \"./Posts.module.css\";\r\nimport {maxLengthValidator, minLengthValidator, required} from \"../../../addons/validators/validators\";\r\nimport {TextareaProfile} from \"../../common/Textarea\";\r\n\r\nlet minLength1 = minLengthValidator(1)\r\nlet maxLength300 = maxLengthValidator(300)\r\n\r\nconst PostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={TextareaProfile} name={\"postMessage\"} className={s.textarea} rows=\"3\" cols=\"110\" validate = {[required, minLength1, maxLength300]}/>\r\n            <p className={s.cominput}>\r\n                <button className=\"ui tiny primary button unselectable\" >Save</button>\r\n            </p>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nlet PostFormRedux = reduxForm({form: \"postForm\"})(PostForm)\r\nexport default PostFormRedux","import React from \"react\";\r\nimport s from \"./Posts.module.css\";\r\nimport Post from \"./post/Post\";\r\nimport PostFormRedux from \"./PostForm\";\r\n\r\n\r\nconst Posts = React.memo(props => {\r\n\r\n    let postsElemets = [...props.data].reverse().map(post => {\r\n        return (\r\n            <Post\r\n                key = {post.id}\r\n                author_image={post.author_image}\r\n                author={post.author}\r\n                text={post.text}\r\n                date={post.date}\r\n                like_count={post.like_count}\r\n            />\r\n        )\r\n    })\r\n    let onSubmit = (formData) => {\r\n        props.addPost(formData.postMessage)\r\n        formData.postMessage = \"\"\r\n    }\r\n    return (\r\n        <div className={s.content}>\r\n            <h3 className={s.text}>Leave your comment here</h3>\r\n            <PostFormRedux onSubmit={onSubmit}/>\r\n            <div className=\"ui comments\">\r\n                {postsElemets}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Posts;\r\n","import {addPost} from \"../../../redux/profileReducer\";\r\nimport Posts from \"./Posts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) =>{\r\n    return {\r\n        data: state.profilePage.postData,\r\n    }\r\n}\r\n\r\nconst PostsContainer = connect(mapStateToProps, {\r\n    addPost,\r\n    },)(Posts)\r\n\r\nexport default PostsContainer;\r\n","import React from \"react\";\r\nimport s from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport PostsContainer from \"./posts/PostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo  savePhoto = {props.savePhoto} photoLoading =  {props.photoLoading} saveProfile = {props.saveProfile}\r\n                          isOwner = {props.isOwner} profileInfo = {props.profileInfo}\r\n                          status ={props.status} updateStatus = {props.updateStatus} isAuth = {props.isAuth}/>\r\n            <PostsContainer/>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfile, getStatus, savePhoto, saveProfile, updateStatus} from \"../../redux/profileReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nclass ProfileContainer extends React.Component{\r\n\r\n    reGetProfile = () =>{\r\n        let userId = this.props.match.params.userId\r\n        if (this.props.isAuth && !userId) {\r\n            userId = this.props.userId\r\n        }\r\n\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.reGetProfile()\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.reGetProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {/*eslint-disable-next-line*/}\r\n                <Profile {...this.props}  userId = {this.userId} isOwner = {!this.props.match.params.userId || this.props.userId == this.props.match.params.userId} savePhoto = {this.props.savePhoto}\r\n                         profileInfo={this.props.profileInfo} status = {this.props.status} updateStatus = {this.props.updateStatus}\r\n                         photoLoading = {this.props.photoLoading} saveProfile = {this.props.saveProfile} profileInfoLoading ={this.props.profileInfoLoading}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    profileInfo: state.profilePage.profileInfo,\r\n    status: state.profilePage.status,\r\n    isAuth:state.auth.isAuth,\r\n    userId: state.auth.id,\r\n    photoLoading: state.profilePage.photoLoading,\r\n    profileInfoLoading: state.profilePage.profileInfoLoading,\r\n})\r\nexport default compose(\r\n    connect(mapStateToProps, {getProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}